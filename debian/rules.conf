# -*- makefile -*-
# rules.conf
#	- used to build debian/control and debian/rules.parameters
#	- assumes unpacked sources

include debian/rules.defs

# The binutils version needed.
# The oldest suitable versions for the various platforms can be found in
# INSTALL/specific.html ; we take a tighter dependency if possible to be on
# the safe side (something like newest( version in stable, versions for the
# various platforms in INSTALL/specific.html) ).
BINUTILSV = 2.15-7
ifdef DEB_CROSS
  BINUTILS_BUILD_DEP = binutils$(TS) (>= $(BINUTILSV))
else
  BINUTILS_BUILD_DEP = binutils (>= $(BINUTILSV)) | binutils-multiarch (>= $(BINUTILSV))
endif

# libc-dev dependencies
libc_ver := 2.3.2.ds1-16
ifeq ($(distribution),Ubuntu)
  libc_ver := 2.3.5-1ubuntu4
endif
ifeq ($(findstring linux, $(DEB_TARGET_GNU_SYSTEM)),linux)
  ifeq ($(DEB_TARGET_GNU_CPU), $(findstring $(DEB_TARGET_GNU_CPU),alpha ia64))
    LIBC_DEP = libc6.1-dev$(LS) (>= $(libc_ver))
  else
    LIBC_DEP = libc6-dev$(LS) (>= $(libc_ver))
  endif
else
  ifeq ($(DEB_TARGET_GNU_SYSTEM),gnu)
    LIBC_DEP = libc0.3-dev$(LS)
  endif
  ifeq ($(DEB_TARGET_GNU_SYSTEM),kfreebsd-gnu)
    LIBC_DEP = libc0.1-dev$(LS)
  endif
  ifeq ($(DEB_TARGET_GNU_SYSTEM),knetbsd-gnu)
    LIBC_DEP = libc0.1-dev$(LS)
  endif
  ifeq ($(DEB_TARGET_GNU_SYSTEM),netbsd-elf-gnu)
    LIBC_DEP = libc12-dev$(LS)
  endif
endif

uclibc_ver := 0.9.28svn20060414-1slind0

ifeq ($(DEB_TARGET_ARCH_OS), uclibc)
 ifdef $(DEB_CROSS_BOOTSTRAP)
  LIBC_DEP := libuclibc-dev-headers$(LS) (>= $(uclibc_ver))
 else
  LIBC_DEP := libuclibc-dev$(LS) (>= $(uclibc_ver))
 endif
endif

LIBC_BUILD_DEP := libc6.1-dev (>= $(libc_ver)) [alpha ia64] | libc0.3-dev (>= $(libc_ver)) | libc0.1-dev (>= $(libc_ver)) | libc12-dev (>= $(libc_ver)) | libc6-dev (>= $(libc_ver))
LIBC_BIARCH_BUILD_DEP = libc6-dev-sparc64 [sparc], libc6-dev-s390x [s390], ia32-libs-dev [amd64] | libc6-dev-i386 [amd64], libc6-dev-powerpc [ppc64],

ifeq ($(distribution),Ubuntu)
  LIBC_BIARCH_BUILD_DEP += libc6-dev-ppc64 [powerpc],
endif
ifeq ($(distribution),Debian)
  LIBC_BIARCH_BUILD_DEP += amd64-libs-dev [i386],
endif
ifeq ($(PKGSOURCE),gcc-snapshot)
  LIBC_BIARCH_BUILD_DEP =
endif

ifdef DEB_CROSS
  # When building a cross compiler, the libc-dev build dependancy must be
  # sensitive to the target architecture; the host architecture is irrelevant.
  LIBC_BUILD_DEP = $(LIBC_DEP)
  LIBC_BIARCH_BUILD_DEP =
endif


SOURCE_VERSION := $(shell dpkg-parsechangelog | awk '/^Version:/ {print $$NF}')
DEB_VERSION := $(shell echo $(SOURCE_VERSION) \
	| sed -e 's/.*://' -e 's/ds[0-9]*//')
# epoch used for gcc versions up to 3.3.x, now used for some remaining
# libraries: libgcc1, libobjc1, libffi2, libffi2-dev, libg2c0
EPOCH := 1
DEB_EVERSION := $(EPOCH):$(DEB_VERSION)
DEB_VERSION_NOREL := $(shell echo $(DEB_VERSION) | sed 's/-[^-]*$$//')
BASE_VERSION := $(shell echo $(DEB_VERSION) | sed -e 's/\([1-9]\.[0-9]\).*-.*/\1/')

# The version number can be found in gcc/version.c e.g.
# char *version_string = "2.95 19990710 (prerelease)";
VER := $(strip $(shell cat $(srcdir)/gcc/BASE-VER))
# The numeric part of the gcc version number (x.yy.zz)
NEXTVER := $(shell echo $(VER) | \
		awk -F. '{OFS="."; if (NF==2) $$3=1; else $$NF += 1; print}')
# first version with a new path component in gcc_lib_dir (i.e. GCC_VERSION
# or TARGET_ALIAS changes)
BREAKS_VERSION = 4.1.0-slind0
GPC_DATE := $(shell sed -n 's/^.define GPC_VERSION_STRING "\(.*\)"/\1/p' $(srcdir)/gcc/p/version.h || true)
DEB_GPC_VERSION := $(shell echo $(DEB_VERSION) \
			   | sed 's/.*:\(.*\)-\(.*\)/2:\1.$(GPC_DATE)-\2/')
# semiautomatic ...
DEB_SOVERSION := $(DEB_VERSION)
DEB_SOVERSION := 4.1.0
DEB_SOEVERSION := $(EPOCH):4.1.0
DEB_STDCXX_SOVERSION := 4.1.0
DEB_FFI_SOVERSION := $(DEB_SOVERSION)
DEB_F2C_SOVERSION := 1:4.1.0-slind0

# manual ...
ifeq ($(DEB_TARGET_GNU_CPU), $(findstring $(DEB_TARGET_GNU_CPU),hppa m68k))
  GCC_SONAME := 2
  DEB_LIBGCC_SOVERSION := $(DEB_SOVERSION)
  DEB_LIBGCC_VERSION := $(DEB_VERSION)
else
  GCC_SONAME := 1
  DEB_LIBGCC_SOVERSION := $(DEB_SOEVERSION)
  DEB_LIBGCC_VERSION :=  $(DEB_EVERSION)
endif

CXX_SONAME := $(strip $(shell awk -F= \
			'/^libtool_VERSION/ {split($$2,v,":"); print v[1]}' \
			$(srcdir)/libstdc++-v3/configure.ac))

OBJC_SONAME := $(strip $(shell awk '/^LIBOBJC_VERSION/ \
					{split($$3,v,":"); print v[1]}' \
				$(srcdir)/libobjc/Makefile.in))

F77_SONAME := $(strip $(shell awk -F= \
			'/^VERSION_MAJOR/ {split($$2,v,":"); print v[1]}' \
				$(srcdir)/libf2c/Makefile.in))

GCJ_SONAME := $(strip $(shell tail -1 $(srcdir)/libjava/libtool-version \
				  | awk -F: '{ print $$1 }' ))

FFI_SONAME := $(strip $(shell tail -1 $(srcdir)/libffi/libtool-version \
				  | awk -F: '{ print $$1 }' ))

GNAT_SONAME := $(strip $(shell \
		grep '[^_]Library_Version.*:' $(srcdir)/gcc/ada/gnatvsn.ads \
		  | sed -e 's/.*"\([^"]*\)".*/\1/'))

GNAT_VERSION := $(BASE_VERSION)

GPC_BASE_VERSION := 2.1

pkg_ver := -$(BASE_VERSION)
gpc_pkg_ver := -$(GPC_BASE_VERSION)$(pkg_ver)

ctrl_flags = \
	-DCV=$(DEB_VERSION) \
	-DSOFT_CV=$(DEB_VERSION_NOREL) \
	-DNV=$(NEXTVER) \
	-DCEV=$(DEB_EVERSION) \
	-DNEV=1:$(NEXTVER) \
	-DBREAKV=$(BREAKS_VERSION) \
	-DGPC_CV=$(DEB_GPC_VERSION) \
	-DBINUTILSV=$(BINUTILSV) \
	-DSRCNAME=$(PKGSOURCE) \
	-D__$(DEB_TARGET_GNU_CPU)__ \
	-DARCH=$(DEB_TARGET_ARCH) \
	-DDIST=$(distribution)
ifeq ($(with_objc)-$(with_objc_gc),yes-yes)
  ctrl_flags +=	-DOBJC_GC
endif
ctrl_flags +=	-DG2C_CEV=1:3.3.4-4

ctrl_flags += \
	-DLIBC_DEP="$(LIBC_DEP)" \
	-DLIBC_BIARCH_BUILD_DEP="$(LIBC_BIARCH_BUILD_DEP)" \
	-DBINUTILS_BUILD_DEP="$(BINUTILS_BUILD_DEP)" \
	-DLIBC_BUILD_DEP="$(LIBC_BUILD_DEP)" \
	-DTP=$(TP) \
	-DTS=$(TS) \
	-DLS=$(LS)
ifneq ($(DEB_CANADA),yes)
 ctrl_flags += -DQQ=yes
endif

ifdef DEB_CROSS
  ifeq ($(DEB_TARGET_ARCH),sparc)
    TARGETBD = , libc6-dev-sparc64-sparc-cross
  endif
  ifeq ($(DEB_TARGET_ARCH),s390)
    TARGETBD = , libc6-dev-s390x-s390-cross
  endif
  ifeq ($(DEB_TARGET_ARCH),ia64)
    TARGETBD = , libunwind7-dev-ia64-cross (>= 0.98.3-3), libatomic-ops-dev-ia64-cross
  endif
  ctrl_flags += \
	-DTARGET=$(DEB_TARGET_ARCH) \
	-DTARGETBD="$(TARGETBD)"
else
  # XXX change when 3.4 becomes the default compiler
  ctrl_flags += \
	-DPRI=optional
endif

ifeq ($(with_base_only),yes)
  ctrl_flags += \
	-DBASE_ONLY=yes
endif

control: control-file parameters-file versioned-files

ifdef DEB_CROSS
 ifdef DEB_CROSS_BOOTSTRAP
  languages = c
  addons = libgcc cdev
 else
  # uclibc doesn't do c++ by default
  ifeq ($(DEB_TARGET_ARCH_OS),uclibc)
   ifeq ($(DEB_TARGET_LIBCXX),yes)
    languages = c c++
    addons = libgcc libcxx cdev c++dev
   else
    languages = c
    addons = libgcc cdev
   endif
  else
   languages = c c++
   addons = libgcc libcxx cdev c++dev
  endif
 endif
else
    languages = c c++
    addons = libgcc libcxx cdev c++dev
     #languages = ada c c++ f77 java objc pascal treelang
     #addons = cdev c++dev fastjar fdev fixincl javadev libcxx libg2c \
     #     libgcc libffi libgcj libgnat libnof libobjc libs \
     #     lib64gcc lib64cxx lib64ffi lib64gcj lib64gnat \
     #     lib64objc lib64g2c libnof objcdev proto
endif

control-file:
	echo "addons: $(addons)"; \
	m4 $(ctrl_flags) \
	  -DPV=$(pkg_ver) \
	  -DGPC_PV=$(gpc_pkg_ver) \
	  -DCXX_SO=$(CXX_SONAME) \
	  -DGCC_SO=$(GCC_SONAME) \
	  -DOBJC_SO=$(OBJC_SONAME) \
	  -DG2C_SO=$(F77_SONAME) \
	  -DGCJ_SO=$(GCJ_SONAME) \
	  -DGNAT_SO=$(GNAT_SONAME) \
	  -DGNAT_V=$(GNAT_VERSION) \
	  -DFFI_SO=$(FFI_SONAME) \
	  -DLIBCXX=$(DEB_TARGET_UCLIBCXX) \
	  -Denabled_languages="$(languages) $(addons)" \
	  -Dada_no_archs="$(foreach arch,$(ada_no_cpus) $(ada_no_systems),!$(arch))" \
	  -Djava_no_archs="$(foreach arch,$(java_no_cpus) $(java_no_systems),!$(arch))" \
	  -Dpascal_no_archs="$(foreach arch,$(pascal_no_cpus) $(pascal_no_systems),!$(arch))" \
	  -Dlibgc_no_archs="$(foreach arch,$(libgc_no_cpus) $(libgc_no_systems),!$(arch))" \
	  -Dcheck_no_archs="$(foreach arch,$(check_no_cpus) $(check_no_systems),!$(arch))" \
	  -Dlocale_no_archs="$(foreach arch,$(locale_no_cpus) $(locale_no_systems),!$(arch))" \
		debian/control.m4 > debian/control.tmp2
	uniq debian/control.tmp2 > debian/control.tmp
	rm -f debian/control.tmp2
	[ -e debian/control ] \
	  && cmp -s debian/control debian/control.tmp \
	  && rm -f debian/control.tmp && exit 0; \
	  mv debian/control.tmp debian/control; touch $(control_stamp)

parameters-file:
	rm -f debian/rules.parameters.tmp
	( \
		echo '# configuration parameters taken from upstream source files'; \
		echo 'VER		:= $(VER)'; \
		echo 'BASE_VERSION	:= $(BASE_VERSION)'; \
		echo 'SOURCE_VERSION	:= $(SOURCE_VERSION)'; \
		echo 'DEB_VERSION	:= $(DEB_VERSION)'; \
		echo 'DEB_EVERSION	:= $(DEB_EVERSION)'; \
		echo 'GPC_BASE_VERSION	:= $(GPC_BASE_VERSION)'; \
		echo 'DEB_GPC_VERSION	:= $(DEB_GPC_VERSION)'; \
		echo 'DEB_SOVERSION	:= $(DEB_SOVERSION)'; \
		echo 'DEB_SOEVERSION	:= $(DEB_SOEVERSION)'; \
		echo 'DEB_LIBGCC_SOVERSION	:= $(DEB_LIBGCC_SOVERSION)'; \
		echo 'DEB_LIBGCC_VERSION	:= $(DEB_LIBGCC_VERSION)'; \
		echo 'DEB_STDCXX_SOVERSION	:= $(DEB_STDCXX_SOVERSION)'; \
		echo 'DEB_FFI_SOVERSION	:= $(DEB_FFI_SOVERSION)'; \
		echo 'DEB_F2C_SOVERSION	:= $(DEB_F2C_SOVERSION)'; \
		echo 'GCC_SONAME	:= $(GCC_SONAME)'; \
		echo 'CXX_SONAME	:= $(CXX_SONAME)'; \
		echo 'F77_SONAME	:= $(F77_SONAME)'; \
		echo 'OBJC_SONAME	:= $(OBJC_SONAME)'; \
		echo 'GCJ_SONAME	:= $(GCJ_SONAME)'; \
		echo 'GNAT_VERSION	:= $(GNAT_VERSION)'; \
		echo 'GNAT_SONAME	:= $(GNAT_SONAME)'; \
		echo 'FFI_SONAME	:= $(FFI_SONAME)'; \
		echo 'LIBC_DEP		:= $(LIBC_DEP)'; \
	) > debian/rules.parameters.tmp
	[ -e debian/rules.parameters ] \
	  && cmp -s debian/rules.parameters debian/rules.parameters.tmp \
	  && rm -f debian/rules.parameters.tmp && exit 0; \
	  mv debian/rules.parameters.tmp debian/rules.parameters; \
	  touch $(control_stamp)

versioned-files:
	for f in debian/*-BV*; do \
	  f2=$$(echo $$f \
		| sed 's/BV/$(BASE_VERSION)/;s/PV/$(GPC_BASE_VERSION)/'); \
	  sed -e 's/@BV@/$(BASE_VERSION)/g' \
	      -e 's/@PV@/$(GPC_BASE_VERSION)/g' \
	    $$f > $$f2; \
	  touch -r $$f $$f2; \
	done
