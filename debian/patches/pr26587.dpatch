#! /bin/sh -e

# DP: Fix for PR tree-optimization/26587, taken from the 4.1 branch.

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

2006-03-07  Richard Guenther  <rguenther@suse.de>

	PR tree-optimization/26587
	* tree-ssa-structalias.c (handle_ptr_arith): Handle MINUS_EXPR.

Index: gcc/testsuite/gcc.dg/torture/pr26587.c
===================================================================
--- gcc/testsuite/gcc.dg/torture/pr26587.c	(revision 0)
+++ gcc/testsuite/gcc.dg/torture/pr26587.c	(revision 111809)
@@ -0,0 +1,28 @@
+/* { dg-do run } */
+
+extern void abort(void);
+typedef unsigned int BF_word;
+typedef BF_word BF_key[16 + 2];
+static struct {
+    BF_key P;
+} BF_current;
+int main(void)
+{   
+    BF_word L;
+    BF_word tmp4, *ptr;
+    BF_word i;
+    for (i = 0; i < 16 + 2; i++)
+        BF_current.P[i] = i * 0x98765432;
+    L = 0;
+    ptr = BF_current.P;
+    do {
+        ptr += 2;
+        L ^= BF_current.P[0];
+        tmp4 = L >> 24;
+        L = tmp4 ^ BF_current.P[16 + 1];
+        *(ptr - 2) = L;
+    } while (ptr < &BF_current.P[16 + 2]);
+    if (L != 0x1fdb9752)
+        abort();
+    return 0;
+}
Index: gcc/tree-ssa-structalias.c
===================================================================
--- gcc/tree-ssa-structalias.c	(revision 111808)
+++ gcc/tree-ssa-structalias.c	(revision 111809)
@@ -2837,7 +2837,8 @@
   tree op0, op1;
   struct constraint_expr base, offset;
 
-  if (TREE_CODE (expr) != PLUS_EXPR)
+  if (TREE_CODE (expr) != PLUS_EXPR
+      && TREE_CODE (expr) != MINUS_EXPR)
     return false;
 
   op0 = TREE_OPERAND (expr, 0);
