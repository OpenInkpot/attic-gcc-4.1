#! /bin/sh -e

# DP: PR middle-end/26004 (rejects-vaild-code, regression), gcc-4_1-branch

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

2006-03-10  Jason Merrill  <jason@redhat.com>

        PR c/26004
        * gimplify.c (gimplify_modify_expr_rhs): Don't do return slot opt if
        the target was declared 'register'.

Index: gcc/testsuite/gcc.dg/pr26004.c
===================================================================
--- gcc/testsuite/gcc.dg/pr26004.c	(revision 0)
+++ gcc/testsuite/gcc.dg/pr26004.c	(revision 111952)
@@ -0,0 +1,11 @@
+/* PR c/26004 */
+/* Bug: the return slot optimization was taking the address of s_3,
+   causing an error. */
+
+struct s_3 { short s[3]; } z_3, s_3;
+struct s_3 add_struct_3 (struct s_3 s){}
+wack_struct_3 (void)
+{
+  int i; register struct s_3 u = z_3;
+  u = add_struct_3 (u);
+}
Index: gcc/gimplify.c
===================================================================
--- gcc/gimplify.c	(revision 111951)
+++ gcc/gimplify.c	(revision 111952)
@@ -3187,7 +3187,8 @@
 		     && needs_to_live_in_memory (*to_p))
 	      /* It's OK to use the return slot directly unless it's an NRV. */
 	      use_target = true;
-	    else if (is_gimple_reg_type (TREE_TYPE (*to_p)))
+	    else if (is_gimple_reg_type (TREE_TYPE (*to_p))
+		     || (DECL_P (*to_p) && DECL_REGISTER (*to_p)))
 	      /* Don't force regs into memory.  */
 	      use_target = false;
 	    else if (TREE_CODE (*to_p) == VAR_DECL
